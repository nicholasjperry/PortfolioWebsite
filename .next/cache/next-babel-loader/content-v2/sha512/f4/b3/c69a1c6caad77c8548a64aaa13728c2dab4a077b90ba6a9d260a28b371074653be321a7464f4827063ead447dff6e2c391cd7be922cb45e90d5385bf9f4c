{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NextSeo } from 'next-seo';\nimport { Box } from 'reflexbox';\nimport fetch from 'isomorphic-unfetch';\n\nfunction About({\n  page\n}) {\n  const SEO = {\n    title: page.Title,\n    description: \"Just your normal About Page :)\",\n    openGraph: {\n      title: page.Title,\n      description: \"Just your normal About Page :)\"\n    }\n  };\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(NextSeo, _objectSpread({}, SEO)), /*#__PURE__*/_jsxs(Box, {\n      variant: \"container\",\n      children: [/*#__PURE__*/_jsx(Box, {\n        as: \"h2\",\n        my: 40,\n        children: page.Title\n      }), /*#__PURE__*/_jsx(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: page.Content\n        }\n      })]\n    })]\n  });\n}\n\nexport async function getStaticProps() {\n  const {\n    API_URL\n  } = process.env;\n  const res = await fetch(`${API_URL}/pages/1`);\n  const data = await res.json();\n  return {\n    props: {\n      page: data\n    },\n    revalidate: 1\n  };\n}\nexport default About;","map":null,"metadata":{},"sourceType":"module"}